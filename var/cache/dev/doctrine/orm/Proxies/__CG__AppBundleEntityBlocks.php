<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Blocks extends \AppBundle\Entity\Blocks implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'blockCodename', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'blockName', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'idParentBlock', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'canvasOrder', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'longitude', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'latitude', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'ubigeo', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'image', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'refresh', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'creationDate', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'idBlockType'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'blockCodename', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'blockName', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'idParentBlock', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'canvasOrder', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'longitude', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'latitude', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'description', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'ubigeo', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'image', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'refresh', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'creationDate', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'active', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Blocks' . "\0" . 'idBlockType'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Blocks $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setBlockCodename($blockCodename)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockCodename', [$blockCodename]);

        return parent::setBlockCodename($blockCodename);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockCodename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockCodename', []);

        return parent::getBlockCodename();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlockName($blockName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlockName', [$blockName]);

        return parent::setBlockName($blockName);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlockName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlockName', []);

        return parent::getBlockName();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdParentBlock($idParentBlock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdParentBlock', [$idParentBlock]);

        return parent::setIdParentBlock($idParentBlock);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdParentBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdParentBlock', []);

        return parent::getIdParentBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setCanvasOrder($canvasOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCanvasOrder', [$canvasOrder]);

        return parent::setCanvasOrder($canvasOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getCanvasOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCanvasOrder', []);

        return parent::getCanvasOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setLongitude($longitude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLongitude', [$longitude]);

        return parent::setLongitude($longitude);
    }

    /**
     * {@inheritDoc}
     */
    public function getLongitude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLongitude', []);

        return parent::getLongitude();
    }

    /**
     * {@inheritDoc}
     */
    public function setLatitude($latitude)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLatitude', [$latitude]);

        return parent::setLatitude($latitude);
    }

    /**
     * {@inheritDoc}
     */
    public function getLatitude()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLatitude', []);

        return parent::getLatitude();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setUbigeo($ubigeo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUbigeo', [$ubigeo]);

        return parent::setUbigeo($ubigeo);
    }

    /**
     * {@inheritDoc}
     */
    public function getUbigeo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUbigeo', []);

        return parent::getUbigeo();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setRefresh($refresh)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRefresh', [$refresh]);

        return parent::setRefresh($refresh);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefresh()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefresh', []);

        return parent::getRefresh();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreationDate($creationDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreationDate', [$creationDate]);

        return parent::setCreationDate($creationDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreationDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreationDate', []);

        return parent::getCreationDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setActive($active)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setActive', [$active]);

        return parent::setActive($active);
    }

    /**
     * {@inheritDoc}
     */
    public function getActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActive', []);

        return parent::getActive();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdBlockType(\AppBundle\Entity\BlockType $idBlockType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdBlockType', [$idBlockType]);

        return parent::setIdBlockType($idBlockType);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdBlockType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdBlockType', []);

        return parent::getIdBlockType();
    }

}
